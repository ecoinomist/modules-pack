# =============================================================================
# GRAPHQL SCHEMA
# Type definitions for Clients (may be symlink so that IDE can resolve types)
# =============================================================================
scalar Color # RGB(A) color code format (comma separate string or array of numbers)
scalar Email
scalar JSON
scalar Id # Incremental ID string generated based on Timestamp
scalar LanguageCode # language ISO code
scalar LanguageLevel # key/value pair of language code as `key`, and spoken fluency level as `value`
scalar LanguageLavelRange # key/value pair of language code as `key`, and range of spoken fluency levels as `value`
scalar Password # string with password strength validator
scalar Permissions # key/value pair of permission code as `key`, and boolean as `value` (example: {'1': true, '2': false})
scalar Phones # key/value pair of phone kind as `key`, and number as `value` (example: {'home': '+111', 'work': '+123'})
scalar Timestamp # in milliseconds since the Unix epoch
scalar URL # example: https://example.com
scalar Upload # built-in Graphql Type for File
enum Operator {
    or
    and
}

# -----------------------------------------------------------------------------
# SUMMARY
# -----------------------------------------------------------------------------
type Query {
    cursor: JSON! # for querying large lists requiring pagination
}

type Mutation {
    _: String
}

type Subscription {
    alerts: [Alert!]!
}


# -----------------------------------------------------------------------------
# UPLOADS
#
# Example:
#   type User {
#       photos: [File!]
#   }
#   input UserInput {
#       photos: [FileInput!]
#   }
#
# Note: File type is flexible by design, and is to be used with these Components:
#   - <UploadGrid/>: list of a single or multiple file versions of the same `kind`
#   - <UploadGrids/>: list of kinds, each with a single or multiple file versions
#   => using FIELD definition, they automatically map File types from backend,
#       and autosave/query/mutate without manual setup in frontend.
#
# Validation:
#   - default `required` validator only checks that <UploadGrid/> has value
#   - specific identifier (i.e. 'HD' version of 'base' kind) requires custom validator
#
# Adhoc implementations:
#   - preview generated by backend automatically
#   - dimensions generated by backend automatically
# -----------------------------------------------------------------------------
type File {
    src: URL! # computed dynamically
    i: JSON # identifier or index position, stored by db
    kind: JSON # type of file (example: public, private...)
    name: String # file name with extension, stored by db
    creatorId: Id
    created: Timestamp
    updated: Timestamp
}

# built-in input `Upload` can be used directly with all `FileInput` attributes attached
input FileInput {
    file: Upload # binary File object uploaded from the client
    i: JSON # identifier or index position of the file in collection
    kind: JSON # type of file (example: public, private...)
    remove: Boolean # whether the file should be deleted

    # Unused fields for Frontend convinience,
    # so GraphQL does not complain about extra fields
    src: String
    name: String # GQL Upload.filename is used instead
    creatorId: Id
    created: Timestamp
    updated: Timestamp
}


# -----------------------------------------------------------------------------
# COMMON TYPES
# -----------------------------------------------------------------------------

type Action {
    type: String
    payload: JSON
    meta: JSON
    error: Boolean
}

type Alert {
    id: ID!
    title: String!
    content: String!
    created: Timestamp!
}

type KeyVal {
    key: String
    val: JSON
}

input KeyValInput {
    key: String
    val: JSON
}

type Range {
    min: Int!
    max: Int
}

input RangeInput {
    min: Int!
    max: Int
}

type TimeRange {
    from: Timestamp
    to: Timestamp
}

input TimeRangeInput {
    from: Timestamp
    to: Timestamp
}
