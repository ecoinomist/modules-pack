# =============================================================================
# GRAPHQL SCHEMA
# Type definitions for Clients (may be symlink so that IDE can resolve types)
# =============================================================================
scalar Color # RGB(A) color code format (comma separate string or array of numbers)
scalar Email
scalar JSON
scalar Id # Incremental ID string generated based on Timestamp
scalar LanguageCode # language ISO code
scalar LanguageLevel # key/value pair of language code as `key`, and spoken fluency level as `value`
scalar LanguageLevelRange # key/value pair of language code as `key`, and range of spoken fluency levels as `value`
#scalar LocalString # this is better to be static type defined in project to allow querying speficic language
scalar Password # string with password strength validator
scalar Permissions # key/value pair of permission code as `key`, and boolean as `value` (example: {'1': true, '2': false})
scalar Phones # key/value pair of phone kind as `key`, and number as `value` (example: {'home': '+111', 'work': '+123'})
scalar Timestamp # in milliseconds since the Unix epoch
scalar URL # example: https://example.com
scalar Upload # built-in Graphql Type for File
enum Operator { # must be lower case values to match with MongoDB operators by default
    or
    and
}

# -----------------------------------------------------------------------------
# SUMMARY
# -----------------------------------------------------------------------------
type Query {
    cursor: JSON! # for querying large lists requiring pagination
}

type Mutation {
    _: String
}

type Subscription {
    alerts: [Alert!]!
}

# See `file.doc.md` for documentation
type File {
    # Computed by the server, or saved to db (the actual ID for GraphQL caching)
    src: URL!
    # Type of file (ex. public/private...)
    kind: JSON
    # Identifier or index position, stored by db (ex. thumb/small/large...)
    i: JSON
    # Optional - created Timestamp (better to use entry type ID).
    # `id` does no guarantee uniqueness, because different versions of the file can have the same `id`.
    id: Id
    # File name with extension for UI use and to get `ext` only, stored by db
    name: String
    creatorId: Id
    created: Timestamp # need this field because `id` may not exist (derived from entry type)
    updated: Timestamp
}

# @Note: built-in input `Upload` can be used directly with all `FileInput` attributes attached.
# But it's better to separate them for more explicit API.
input FileInput {
    # Binary File object uploaded from the client, required if `remove` is not true.
    # For security reasons, do not allow User to upload arbitary URL as src string.
    file: Upload
    # Type of file (ex. public/private...)
    kind: JSON
    # Identifier or index position, stored by db (ex. thumb/small/large...)
    i: JSON
    # Created Timestamp, can be used to unique identify the file
    id: Id
    # Ignored, upload uses GQL Upload.filename instead, for frontend convinience only.
    name: String
    # Whether to delete the file, it's called `remove` because `delete` is JS keyword
    remove: Boolean

    # Unused fields, only here to avoid GraphQL complaining about unknown inputs.
    #src: URLOrBase64
    #creatorId: Id
    #created: Timestamp
    #updated: Timestamp
}


# -----------------------------------------------------------------------------
# COMMON TYPES
# -----------------------------------------------------------------------------

type Action {
    type: String
    payload: JSON
    meta: JSON
    error: Boolean
}

type Alert {
    id: ID! # created Timestamp
    title: String!
    content: String!
}

type KeyVal {
    key: String
    val: JSON
}

input KeyValInput {
    key: String
    val: JSON
}

type Range {
    min: Int!
    max: Int
}

input RangeInput {
    min: Int!
    max: Int
}

type TimeRange {
    from: Timestamp
    to: Timestamp
}

input TimeRangeInput {
    from: Timestamp
    to: Timestamp
}
